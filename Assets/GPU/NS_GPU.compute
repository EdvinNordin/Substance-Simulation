// FluidSimulation.compute

#pragma kernel Advection
#pragma kernel Diffusion
#pragma kernel Projection
#pragma kernel Projection2
#pragma kernel Projection3
#pragma kernel SetBoundsX
#pragma kernel SetBoundsY
#pragma kernel AddValue
#pragma kernel AddVelocity

// Simulation parameters
#define dt 0.01
//#define viscosity 0.001
//#define diffusion 0.000001

float spread;

uint Width;
uint Height;

int Channel;

float hitPosX;
float hitPosY;

float xAmount;
float yAmount;

Texture2D<float2> In;  // Input Texture
RWTexture2D<float2> Out;  // Output Texture
RWTexture2D<float2> Velocity;  // Velocity Texture
RWTexture2D<float> Pressure;  // Pressure Texture
Texture2D<float> PressurePrev;  // Previous Pressure Texture
RWTexture2D<float> Divergence;  // Divergence Texture

[numthreads(8, 8, 1)]
void Advection(int2 id : SV_DispatchThreadID)
{
    float2 dt0 = dt * (float2(Width-2.0f, Height-2.0f));
	float2 vec = float2(id) - dt0 * float2(Velocity[id].x, Velocity[id].y);
	vec = clamp(vec.xy, 0.5, (float2(Width-2.0f, Height-2.0f)) + 0.5);

	int2 xy0 = (int2) vec.xy;
	int2 xy1 = xy0 + 1;

	float2 st1 = vec.xy - xy0;
	float2 st0 = 1 - st1;

	Out[id] = 
		st0.x * (st0.y * In[xy0] + st1.y * In[int2(xy0.x, xy1.y)]) +
		st1.x * (st0.y * In[int2(xy1.x, xy0.y)] + st1.y * In[xy1]);

}

[numthreads(8, 8, 1)]
void Diffusion(int2 id : SV_DispatchThreadID)
{
    float a = dt * spread * (Width - 2) * (Height - 2);

    Out[id] =
            (In[id] + a * (Out[id + int2(1, 0)] + Out[id + int2(-1, 0)] + 
            Out[id + int2(0, 1)] + Out[id + int2(0, -1)])) / (1 + 4 * a);
}

[numthreads(8, 8, 1)]
void Projection(int2 id : SV_DispatchThreadID) 
{
    Divergence[int2(id)] = -0.5f *
                    ((Velocity[int2(id.x+1, id.y)].x -
                      Velocity[int2(id.x-1, id.y)].x)/Width +
                      (Velocity[int2(id.x, id.y+1)].y -
                      Velocity[int2(id.x, id.y-1)].y)/ 
                      Height);
        
    Pressure[int2(id)] = 0;
    
}

[numthreads(8, 8, 1)]
void Projection2(int2 id : SV_DispatchThreadID) 
{
    Pressure[id] = 
                (Divergence[id] + (PressurePrev[id + int2(1, 0)] + PressurePrev[id + int2(-1, 0)] + 
                PressurePrev[id + int2(0, 1)] + PressurePrev[id + int2(0, -1)])) / 4;
}

[numthreads(8, 8, 1)]
void Projection3(int2 id : SV_DispatchThreadID) 
{
    float2 newVelocity;
    newVelocity.x = Velocity[id].x - 0.5f * (PressurePrev[int2(id.x+1, id.y)] - PressurePrev[int2(id.x-1, id.y)]) * (Width);
    newVelocity.y = Velocity[id].y - 0.5f * (PressurePrev[int2(id.x, id.y+1)] - PressurePrev[int2(id.x, id.y-1)]) * (Height);
    Velocity[id] = newVelocity;

}

[numthreads(16, 1, 1)]
void SetBoundsX(int id : SV_DispatchThreadID)
{
    if (id.x < Width/2){
        Out[int2(0, id.x)] = -In[int2(1, id.x)];
    }
    else{
        Out[int2(Width-1, id.x-Width/2)] = -In[int2(Width-2, id.x-Width/2)];
    }
}

[numthreads(16, 1, 1)]
void SetBoundsY(int id : SV_DispatchThreadID)
{
    if (id.x < Height/2){
        Out[int2(id.x, 0)] = -In[int2(id.x, 1)];
    }
    else{
        Out[int2(id.x-Height/2, Height-1)] = -In[int2(id.x-Height/2, Height-2)];
    }
}

[numthreads(1, 1, 1)]
void AddValue(int2 id : SV_DispatchThreadID)
{
	Out[int2(hitPosX, hitPosY)] += 1.0f;
}

[numthreads(4, 4, 1)]
void AddVelocity(int2 id : SV_DispatchThreadID)
{
    float scale = 1.0f;
	Velocity[int2(hitPosX+id.x-2, hitPosY+id.y-2)] += float2(xAmount * scale, yAmount * scale);
}
